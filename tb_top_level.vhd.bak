library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tb_top_level is
end tb_top_level;

architecture behavior of tb_top_level is

  -- Constants
  constant CLOCK_PERIOD : time := 20 ns; -- 50 MHz clock
  constant SINE_AMPLITUDE : integer := 32767; -- Maximum amplitude for 16-bit signed value
  constant SINE_FREQUENCY : integer := 1000; -- 1 kHz sine wave frequency

  -- Signals
  signal CLOCK_50   : std_logic := '0';
  signal RST        : std_logic := '1';
  signal data_out   : std_logic_vector(15 downto 0);
  
  -- ADC SPI Protocol signals
  signal ADC_SDAT   : std_logic := '0';  -- Data from ADC
  signal ADC_SADDR  : std_logic := '0';  -- Address for ADC
  signal ADC_CS_N   : std_logic := '1';  -- Chip select for ADC
  signal ADC_SCLK   : std_logic := '0';  -- SPI Clock for ADC
  
  -- DAC I2C Protocol signals
  signal SDA        : std_logic := 'Z';  -- I2C SDA
  signal SCL        : std_logic := 'Z';  -- I2C SCL

  -- Sine wave lookup table (16 samples per cycle)
  type sine_wave_array is array (0 to 15) of integer;
  constant SINE_WAVE : sine_wave_array := (
    0, 12539, 23170, 30273, 32767, 30273, 23170, 12539,
    0, -12539, -23170, -30273, -32767, -30273, -23170, -12539
  );

  signal sine_index : integer range 0 to 15 := 0; -- Index for lookup table

begin

  -- Clock generation
  CLOCK_GEN : process
  begin
    CLOCK_50 <= not CLOCK_50 after CLOCK_PERIOD / 2;
    wait for CLOCK_PERIOD / 2;
  end process;

  -- Sine wave generation (sampled at the clock frequency)
  sine_wave_gen : process(CLOCK_50)
  begin
    if rising_edge(CLOCK_50) then
      -- Output the current sine wave sample and increment the index
      ADC_SDAT <= std_logic_vector(to_signed(SINE_WAVE(sine_index), 16))(15);  -- Take the MSB of the 16-bit signed value
      
      -- Increment index and wrap around at the end of the table
      sine_index <= (sine_index + 1) mod 16;
    end if;
  end process;

  -- Instantiate the UUT (Unit Under Test)
  uut: entity work.test
    port map (
      CLOCK_50   => CLOCK_50,
      RST        => RST,
      data_out   => data_out,
      ADC_SDAT   => ADC_SDAT,
      ADC_SADDR  => ADC_SADDR,
      ADC_CS_N   => ADC_CS_N,
      ADC_SCLK   => ADC_SCLK,
      SDA        => SDA,
      SCL        => SCL
    );

  -- Reset process
  reset_gen : process
  begin
    RST <= '0';
    wait for 100 ns;
    RST <= '1';
    wait for 100 ns;
    RST <= '0';
    wait;
  end process;

end behavior;
